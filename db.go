package main

import (
	"encoding/xml"
	"fmt"
	"io/ioutil"
	"os"

	"github.com/jinzhu/gorm"
	"github.com/jordan-wright/cve-api/cve"
	_ "github.com/mattn/go-sqlite3"
)

var db gorm.DB

func init() {
	var err error
	db, err = gorm.Open("sqlite3", "cve.db")
	if err != nil {
		panic(fmt.Sprintf("Got error when connect database, the error is '%v'", err))
	}
	if _, err = os.Stat("cve.db"); err != nil {
		fmt.Println("Creating database..")
		db.Debug().CreateTable(cve.CVSS{})
		db.Debug().CreateTable(cve.Reference{})
		db.Debug().CreateTable(cve.Link{})
		db.Debug().CreateTable(cve.Product{})
		db.Debug().CreateTable(cve.Entry{})
		raw, err := ioutil.ReadFile("cve/nvdcve-2.0-2002.xml")
		if err != nil {
			fmt.Println(err)
		}
		// Make this streamlined via: http://blog.davidsingleton.org/parsing-huge-xml-files-with-go/
		nvd := cve.NVD{}
		fmt.Println("Unmarshalling XML entries into struct")
		err = xml.Unmarshal([]byte(raw), &nvd)
		if err != nil {
			fmt.Println(err)
		}
		fmt.Println("Adding entries to db...")
		tx := db.Begin()
		for _, entry := range nvd.Entries {
			tx.Save(&entry)
		}
		err = tx.Commit().Error
		if err != nil {
			fmt.Println(err)
		}
	}
}
