package main

import (
	"fmt"
	"io"
	"net/http"
	"os"

	"github.com/gorilla/mux"
)

const (
	BaseURL string = "http://static.nvd.nist.gov/feeds/xml/cve/"
)

func main() {
	/*	r := mux.NewRouter()
		r.HandleFunc("/{year:[1-2][0-9]{3}}", CVEByYearHandler)
		r.HandleFunc("/{year:[1-2][0-9]{3}}/{id:[0-9]+}", CVEByIdHandler)
		r.NotFoundHandler = http.HandlerFunc(NotFoundHandler)
		http.Handle("/", r)*/
	//http.ListenAndServe("127.0.0.1:3334", nil)
	if err := downloadFile("nvdcve-2.0-2002.xml"); err != nil {
		fmt.Println(err)
	}
}

func downloadFile(fn string) error {
	fmt.Printf("Downloading %s%s\n", BaseURL, fn)
	c, err := http.Get(BaseURL + fn)
	if err != nil {
		return err
	}
	defer c.Body.Close()
	out, err := os.Create(fn)
	defer out.Close()
	if err != nil {
		return err
	}
	_, err = io.Copy(out, c.Body)
	if err != nil {
		return err
	}
	fmt.Printf("Created %s\n", fn)
	return nil
}

//CVEByYearHandler queries the database for all CVE's from a specific year and returns the details in JSON format.
func CVEByYearHandler(w http.ResponseWriter, r *http.Request) {
	year := mux.Vars(r)["year"]
	fmt.Fprintf(w, "Searching for CVE-%s-*", year)
}

//CVEByIdHandler queries the database for a specific CVE (CVE-XXXX-YYY...) and returns the details in JSON format.
func CVEByIdHandler(w http.ResponseWriter, r *http.Request) {
	year := mux.Vars(r)["year"]
	id := mux.Vars(r)["id"]
	fmt.Fprintf(w, "Searching for CVE-%s-%s", year, id)
}

//CVEByIdHandler queries the database for a specific CVE (CVE-XXXX-YYY...) and returns the details in JSON format.
func NotFoundHandler(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "404 - Not Found")
}
