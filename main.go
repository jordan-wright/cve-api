package main

import (
	"encoding/json"
	"encoding/xml"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"

	"github.com/jordan-wright/cve-api/cve"
)

const (
	BaseURL string = "http://static.nvd.nist.gov/feeds/xml/cve/"
)

var nvdjs []byte

func main() {
	//if err := downloadFile("nvdcve-2.0-2002.xml"); err != nil {
	//	fmt.Println(err)
	//}
	raw, err := ioutil.ReadFile("cve/nvdcve-2.0-2002.xml")
	if err != nil {
		fmt.Println(err)
	}
	nvd := cve.NVD{}
	fmt.Println("Unmarshalling XML entries into struct")
	err = xml.Unmarshal([]byte(raw), &nvd)
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println("Adding entries to db...")
	for _, entry := range nvd.Entries {
		err := db.Debug().Save(entry).Error
		if err != nil {
			fmt.Println(err)
		}
	}
	nvdjs, err = json.MarshalIndent(&nvd, " ", "    ")
	if err != nil {
		fmt.Println(err)
	}
	http.Handle("/", NewRouter())
	fmt.Println("Listening on :3334")
	http.ListenAndServe("127.0.0.1:3334", nil)
}

func downloadFile(fn string) error {
	fmt.Printf("Downloading %s%s\n", BaseURL, fn)
	c, err := http.Get(BaseURL + fn)
	if err != nil {
		return err
	}
	defer c.Body.Close()
	out, err := os.Create(fn)
	defer out.Close()
	if err != nil {
		return err
	}
	_, err = io.Copy(out, c.Body)
	if err != nil {
		return err
	}
	fmt.Printf("Created %s\n", fn)
	return nil
}
